# : << EOF

# With help from:
# https://github.com/gpakosz/.tmux
#
# To debug, simply run from the terminal (to test ssh functionaity, ssh donovans@localhost first):
#     cut -c3- ~/.config/tmux/.tmux.conf | zsh -x -s _test

# TODO: Can I change the border of individual panes (ie, highlight ssh's into prod)?

####################################################################################################
### Icon ###

set-option -g '@LessThan' 'ÓÇ≤'
set-option -g '@GreaterThan' 'ÓÇ∞'
set-option -g '@LeftBubble' 'ÓÇ∂'
set-option -g '@RightBubble' 'ÓÇ¥'
set-option -g '@Clock' 'üïò'

####################################################################################################
### Theme ###

set-option -g '@Nord1' 'yellow' # 3B4252

# TODO: How should I use @Nord1 here?
set-option -g '@ThemeColor1' '#[fg=white,bg=#5E81AC]'
set-option -g '@ThemeColor1Reverse' '#[fg=#5E81AC,bg=white]'
set-option -g '@ThemeColor1ReverseBlack' '#[fg=#5E81AC,bg=#3B4252]'
set-option -g '@ThemeColor2' '#[fg=black,bg=#88C0D0]'
set-option -g '@ThemeColor2Reverse' '#[fg=#88C0D0,bg=#3B4252]'

####################################################################################################
### General ###

#set-option -g default-command /usr/local/microsoft/powershell/7/pwsh # -NoLogo"
#set-option -g default-shell /usr/local/microsoft/powershell/7/pwsh
#set-option -g default-shell "/bin/zsh"
# https://mbuffett.com/posts/setting-up-tmux-and-kitty-for-true-color-support/
set-option -g default-terminal screen-256color

set-option -g history-limit 50000

set-option -g mouse on
set-option -g base-index 1  # Set window base index (not pane-base-index)
set-window-option -g monitor-activity off
set-option -g visual-activity off

set-window-option -g window-style fg=colour240,bg=black
set-window-option -g window-active-style fg=white,bg=#000000

####################################################################################################
### Status bar ###

# TODO: Fix the color/style craziness

set-option -g status-position top

set-option -g status-style "fg=black,bg=#3B4252"

set-option -g window-status-style fg=#8a8a8a,bg=#080808
set-option -g window-status-last-style fg=#00afff,bg=#303030
set-option -g window-status-current-style fg=#080808,bg=#00afff,bright

set-option -g status-left-length 90
set-option -g status-left "#(cut -c3- ~/.config/tmux/.tmux.conf | zsh -s _load_status_bar_widgets)"
set-option -ag status-left "#[fg=#3B4252,bg=#080808]#{@LeftBubble}#[default]"
set-option -ag status-left "#[fg=#E4E4E4,bg=#3B4252]#{@LeftBubble}#[default]"
set-option -ag status-left "#[fg=#080808,bg=#e4e4e4,bold]#{@LayoutIcon} #S:#W:#P #[default]"
set-option -ag status-left "#[fg=#E4E4E4,bg=#3B4252]#{@RightBubble}#[default] "
set-option -ag status-left "#[fg=#5E81AC]#{@LeftBubble}#[default]"
set-option -ag status-left "#{@ThemeColor1}#[bold]#{@status_username} #[nobold]@#[bold] #{@status_hostname}#[default]"
set-option -ag status-left "#[fg=#5E81AC,bg=#3B4252]#{@RightBubble}#[default]"

set-option -g status-justify centre
set-option -g window-status-last-style ""
set-option -g window-status-separator " "

set-option -g window-status-current-format "#{@ThemeColor2Reverse}#{@LessThan}#{@ThemeColor2}#[bold] #I ÓÇ± #W #F #[nobold]#{@ThemeColor2Reverse}#{@GreaterThan}#[default]"
set-option -g window-status-format "#{@ThemeColor1ReverseBlack}#{@LeftBubble}#{@ThemeColor1}#[bold] #I #[nobold]ÓÇ± #W #[bold]#F#[nobold] #{@ThemeColor1ReverseBlack}#{@RightBubble}#[default]"

set-option -g status-right-length 60
set-option -g status-right "#[fg=#5E81AC]#{@LeftBubble}#[default]"
set-option -ag status-right "#{@ThemeColor1}#{@Clock} %H:%M %Y %d %b"
set-option -ag status-right "#[fg=#5E81AC,bg=#3B4252]#{@RightBubble}#[default]"
set-option -ag status-right "#[fg=#3B4252,bg=#080808]#{@RightBubble}#[default]"

####################################################################################################
### Key bindings ###

bind-key R {
    source-file ~/.config/tmux/.tmux.conf
    display-message "Reloaded!"
}

bind-key y select-window -l     # Last window
bind-key u select-window -p
bind-key o select-window -n

bind-key r command-prompt -I'#W' "rename-window -- '%%'"

unbind-key '"'
bind-key \\ split-window -h
unbind-key %
bind-key - split-window -v

# C-b z toggles maximize on the current pane

set-option -g '@LayoutIcon' 'Ôóë'
bind-key t {
    select-layout main-vertical
    set-option -g '@LayoutIcon' 'Ôóë'
}
bind-key b {
    select-layout main-horizontal
    set-option -g '@LayoutIcon' 'Ôóâ'
}
bind-key g {
    select-layout tiled
    set-option -g '@LayoutIcon' 'Ôóê'
}

bind-key ` display-popup -E -w 85% -h 85% "btop"
bind-key . display-popup -E -w 85% -h 85% "/bin/zsh"

bind-key U {
    run-shell 'tmux set-option -g "@WIDTH" "$(expr $(#{@tmux} display -p "#{window_width}") "*" 66 "/" 100)"'
    swap-pane -t 0
    select-pane -t 0
    select-layout main-vertical
    run-shell 'tmux resize-pane -t 0 -x #{@WIDTH} -y #{window_height}'
}

bind-key ? run-shell "bat ~/.config/tmux/help.md"

# Naivate panes with j i l and ,
bind-key j select-pane -L
bind-key l select-pane -R
bind-key i select-pane -U
bind-key , select-pane -D

# M-[0..9] Switch between windows 1-10
bind-key -n M-0 if-shell "tmux select-window -t 0" "" "new-window -t 0"
bind-key -n M-1 if-shell "tmux select-window -t 1" "" "new-window -t 1"
bind-key -n M-2 if-shell "tmux select-window -t 2" "" "new-window -t 2"
bind-key -n M-3 if-shell "tmux select-window -t 3" "" "new-window -t 3"
bind-key -n M-4 if-shell "tmux select-window -t 4" "" "new-window -t 4"
bind-key -n M-5 if-shell "tmux select-window -t 5" "" "new-window -t 5"
bind-key -n M-6 if-shell "tmux select-window -t 6" "" "new-window -t 6"
bind-key -n M-7 if-shell "tmux select-window -t 7" "" "new-window -t 7"
bind-key -n M-8 if-shell "tmux select-window -t 8" "" "new-window -t 8"
bind-key -n M-9 if-shell "tmux select-window -t 9" "" "new-window -t 9"

# M-S-[0..9] Moves the current pane to windows 1-10
bind-key -n M-) if-shell "tmux join-pane -t 0" "" "new-window -dt 0; join-pane -t 0; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-! if-shell "tmux join-pane -t 1" "" "new-window -dt 1; join-pane -t 1; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-@ if-shell "tmux join-pane -t 2" "" "new-window -dt 2; join-pane -t 2; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-# if-shell "tmux join-pane -t 3" "" "new-window -dt 3; join-pane -t 3; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-$ if-shell "tmux join-pane -t 4" "" "new-window -dt 4; join-pane -t 4; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-% if-shell "tmux join-pane -t 5" "" "new-window -dt 5; join-pane -t 5; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-^ if-shell "tmux join-pane -t 6" "" "new-window -dt 6; join-pane -t 6; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-& if-shell "tmux join-pane -t 7" "" "new-window -dt 7; join-pane -t 7; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-* if-shell "tmux join-pane -t 8" "" "new-window -dt 8; join-pane -t 8; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E
bind-key -n M-( if-shell "tmux join-pane -t 9" "" "new-window -dt 9; join-pane -t 9; select-pane -t top-left; kill-pane" \; select-layout \; select-layout -E

bind-key -n M-F4 kill-pane

#bind-key z run 'cut -c3- ~/.config/tmux/.tmux.conf | zsh -s _test'
source-file -q ~/.config/tmux/.tmux.zillow.conf

####################################################################################################
### Initialization ###

run 'cut -c3- ~/.config/tmux/.tmux.conf | zsh -s startup'

%if #{!=:#{@RefreshedOhMyTmux},yes}
    run-shell "curl 'https://raw.githubusercontent.com/gpakosz/.tmux/master/.tmux.conf' -o '/Users/donovans/.config/tmux/.ohmytmux.sh' -s"
    set-option -g '@RefreshedOhMyTmux' 'yes'
%endif

%if #{==:#{session_name},0}
    rename-session "main"
%endif

####################################################################################################
### Scripts ###

# EOF

# # exit the script if any statement returns a non-true return value
# set -e
#
# startup() {
#   if [[ "$TERMINFO" =~ "kitty" ]]; then
#     tmux set-option -sa terminal-overrides ",xterm-kitty:RGB"
#   fi
# }
#
# _get_cpu_usage_status() {
#     cache_until=$(tmux show-option -gv '@status_cpu_usage_cache_until')
#     now=$(date +%Y%m%d%H%M%S)
#
#     if [[ $now > $cache_until ]]; then
#         local stats=$(iostat -c 2 disk0 | sed '/^\s*$/d' | tail -n 1 | awk -v format="%d %d %d %d" '{usage=100-$6} {l1=$7} {l5=$8} {l15=$9} END {printf(format, usage, $7, $8, $9)}' | sed 's/,/./')
#         eval set -- $stats
#         local cpu_load=$1
#         local cpu_avg_1m=$2
#         local cpu_avg_5m=$3
#         local cpu_avg_15m=$4
#         #eval set -- "‚ñè ‚ñé ‚ñç ‚ñå ‚ñã ‚ñä ‚ñâ ‚ñà"
#         eval set -- "‚ñÅ ‚ñÇ ‚ñÉ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá ‚ñà"
#         (( number_of_buckets = 100 / 8 ))
#         if [[ $cpu_load -eq 0 ]]; then cpu_load=1; fi
#         (( bucket = ($cpu_load / $number_of_buckets) + 1 ))
#         if [[ $bucket -gt 7 ]]; then bucket=7; fi
#         eval $(awk "BEGIN { printf \"cpu_icon=$%d\", ($bucket + 1) }")
#
#         usage_history=$(tmux show-option -gv '@status_cpu_usage_history')
#         tmux set-option -g '@status_cpu_usage' "[$usage_history] $cpu_icon $cpu_load ($cpu_avg_15m)"
#         tmux set-option -g '@status_cpu_usage_cache_until' $(date -d '15 seconds' +%Y%m%d%H%M%S)
#         usage_history="$usage_history[2,-1]$cpu_icon"
#         tmux set-option -g '@status_cpu_usage_history' "$usage_history"
#     fi
# }
#
# _load_status_bar_widgets() {
#   pane_pid=$(tmux display -p "#{pane_pid}")
#   pane_tty=$(tmux display -p "#{b:pane_tty}")
#   h=$(tmux display -p "#h")
#   d=$(tmux display -p "#D")
#   tmux set-option -g '@status_hostname' "$(cut -c3- ~/.config/tmux/.ohmytmux.sh | zsh -s _hostname $pane_pid $pane_tty false false $h $d)"
#   tmux set-option -g '@status_username' "$(cut -c3- ~/.config/tmux/.ohmytmux.sh | zsh -s _username)"
# #    _get_cpu_usage_status
# }
#
# "$@"
